This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
.gitignore
components/ArticleItem.tsx
components/Button.tsx
components/NavBar.tsx
deno.json
dev.ts
fresh.config.ts
fresh.gen.ts
islands/CreateForm.tsx
lib/db.ts
main.ts
models/Article.ts
README.md
routes/_404.tsx
routes/_app.tsx
routes/api/joke.ts
routes/api/logs.ts
routes/create/index.tsx
routes/index.tsx
static/logo.svg
static/styles.css
tools/init_db.ts
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path=".gitignore">
# dotenv environment variable files
.env
.env.development.local
.env.test.local
.env.production.local
.env.local

# Fresh build directory
_fresh/
# npm dependencies
node_modules/
</file>

<file path="components/ArticleItem.tsx">
import Article from "../models/Article.ts";

export function ArticleItem(props: { article: Article }) {
  return (
    <div class="fl-col">
      <p>{props.article.date}</p>
      <h1>{props.article.title}</h1>
      <p>{props.article.content}</p>
    </div>
  );
}
</file>

<file path="components/Button.tsx">
import { JSX } from "preact";
import { IS_BROWSER } from "$fresh/runtime.ts";

export function Button(props: JSX.HTMLAttributes<HTMLButtonElement>) {
  return (
    <button
      {...props}
      disabled={!IS_BROWSER || props.disabled}
      class="px-2 py-1 border-gray-500 border-2 rounded bg-white hover:bg-gray-200 transition-colors"
    />
  );
}
</file>

<file path="components/NavBar.tsx">
export function NavBar() {
  return (
    <div class="w100 fl-row ai-center" style={{ gap: "16px" }}>
      <h1>Fujimi-LAB-Log</h1>
      <a href="/">Home</a>
      <a href="/create">Create</a>
    </div>
  );
}
</file>

<file path="deno.json">
{
  "lock": false,
  "tasks": {
    "check": "deno fmt --check && deno lint && deno check **/*.ts && deno check **/*.tsx",
    "cli": "echo \"import '\\$fresh/src/dev/cli.ts'\" | deno run --unstable -A -",
    "manifest": "deno task cli manifest $(pwd)",
    "start": "deno run -A --watch=static/,routes/ dev.ts",
    "build": "deno run -A dev.ts build",
    "preview": "deno run -A main.ts",
    "update": "deno run -A -r https://fresh.deno.dev/update ."
  },
  "lint": {
    "rules": {
      "tags": [
        "fresh",
        "recommended"
      ]
    }
  },
  "exclude": [
    "**/_fresh/*"
  ],
  "imports": {
    "$fresh/": "https://deno.land/x/fresh@1.7.3/",
    "preact": "https://esm.sh/preact@10.22.0",
    "preact/": "https://esm.sh/preact@10.22.0/",
    "@preact/signals": "https://esm.sh/*@preact/signals@1.2.2",
    "@preact/signals-core": "https://esm.sh/*@preact/signals-core@1.5.1",
    "$std/": "https://deno.land/std@0.216.0/"
  },
  "compilerOptions": {
    "jsx": "react-jsx",
    "jsxImportSource": "preact"
  }
}
</file>

<file path="dev.ts">
#!/usr/bin/env -S deno run -A --watch=static/,routes/

import dev from "$fresh/dev.ts";
import config from "./fresh.config.ts";

import "$std/dotenv/load.ts";

await dev(import.meta.url, "./main.ts", config);
</file>

<file path="fresh.config.ts">
import { defineConfig } from "$fresh/server.ts";

export default defineConfig({});
</file>

<file path="fresh.gen.ts">
// DO NOT EDIT. This file is generated by Fresh.
// This file SHOULD be checked into source version control.
// This file is automatically updated during development when running `dev.ts`.

import * as $_404 from "./routes/_404.tsx";
import * as $_app from "./routes/_app.tsx";
import * as $api_joke from "./routes/api/joke.ts";
import * as $api_logs from "./routes/api/logs.ts";
import * as $create_index from "./routes/create/index.tsx";
import * as $index from "./routes/index.tsx";
import * as $CreateForm from "./islands/CreateForm.tsx";
import type { Manifest } from "$fresh/server.ts";

const manifest = {
  routes: {
    "./routes/_404.tsx": $_404,
    "./routes/_app.tsx": $_app,
    "./routes/api/joke.ts": $api_joke,
    "./routes/api/logs.ts": $api_logs,
    "./routes/create/index.tsx": $create_index,
    "./routes/index.tsx": $index,
  },
  islands: {
    "./islands/CreateForm.tsx": $CreateForm,
  },
  baseUrl: import.meta.url,
} satisfies Manifest;

export default manifest;
</file>

<file path="islands/CreateForm.tsx">
import { useSignal } from "@preact/signals";

export default function CreateForm() {
  const status = useSignal("idle");

  async function handleSubmit(e: Event) {
    e.preventDefault();
    const form = e.currentTarget as HTMLFormElement;
    const formData = new FormData(form);
    const payload = {
      date: formData.get("date"),
      title: formData.get("title"),
      content: formData.get("content"),
    };
    const res = await fetch("/api/logs", {
      method: "POST",
      body: JSON.stringify(payload),
    });
    status.value = res.ok ? "submitted" : "error";
    form.reset();
  }

  return (
    <form class="fl-col form-root" onSubmit={handleSubmit}>
      <label>DATE</label>
      <input name="date" required />
      <label>TITLE</label>
      <input name="title" required />
      <label>CONTENT</label>
      <input name="content" required />
      <button type="submit">SUBMIT</button>
      <p>{status}</p>
    </form>
  );
}
</file>

<file path="lib/db.ts">
// lib/db.ts
import { DB } from "https://deno.land/x/sqlite/mod.ts";

const db = new DB("data/logs.sqlite");

export function insertLog(date: string, title: string, content: string) {
  db.query(
    "INSERT INTO logs (date, title, content) VALUES (?, ?, ?)",
    [date, title, content],
  );
}

export function getLogs(): {
  id: string;
  date: string;
  title: string;
  content: string;
}[] {
  return db.queryEntries("SELECT * FROM logs ORDER BY id DESC");
}
</file>

<file path="main.ts">
/// <reference no-default-lib="true" />
/// <reference lib="dom" />
/// <reference lib="dom.iterable" />
/// <reference lib="dom.asynciterable" />
/// <reference lib="deno.ns" />

import "$std/dotenv/load.ts";

import { start } from "$fresh/server.ts";
import manifest from "./fresh.gen.ts";
import config from "./fresh.config.ts";

await start(manifest, config);
</file>

<file path="models/Article.ts">
// replaced by orm-ed type or something?
export default interface Article {
  date: string;
  title: string;
  content: string;
}
</file>

<file path="README.md">
# Fresh project

Your new Fresh project is ready to go. You can follow the Fresh "Getting
Started" guide here: https://fresh.deno.dev/docs/getting-started

### Usage

Make sure to install Deno: https://deno.land/manual/getting_started/installation

Then start the project:

```
deno task start
```

This will watch the project directory and restart as necessary.
</file>

<file path="routes/_404.tsx">
import { Head } from "$fresh/runtime.ts";

export default function Error404() {
  return (
    <>
      <Head>
        <title>404 - Page not found</title>
      </Head>
      <div class="px-4 py-8 mx-auto bg-[#86efac]">
        <div class="max-w-screen-md mx-auto flex flex-col items-center justify-center">
          <img
            class="my-6"
            src="/logo.svg"
            width="128"
            height="128"
            alt="the Fresh logo: a sliced lemon dripping with juice"
          />
          <h1 class="text-4xl font-bold">404 - Page not found</h1>
          <p class="my-4">
            The page you were looking for doesn't exist.
          </p>
          <a href="/" class="underline">Go back home</a>
        </div>
      </div>
    </>
  );
}
</file>

<file path="routes/_app.tsx">
import { type PageProps } from "$fresh/server.ts";
import { NavBar } from "../components/NavBar.tsx";

export default function App({ Component }: PageProps) {
  return (
    <html>
      <head>
        <meta charset="utf-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <title>fujimi-lab-log</title>
        <link rel="stylesheet" href="/styles.css" />
      </head>
      <body>
        <NavBar />
        <main>
          <Component />
        </main>
      </body>
    </html>
  );
}
</file>

<file path="routes/api/joke.ts">
import { FreshContext } from "$fresh/server.ts";

// Jokes courtesy of https://punsandoneliners.com/randomness/programmer-jokes/
const JOKES = [
  "Why do Java developers often wear glasses? They can't C#.",
  "A SQL query walks into a bar, goes up to two tables and says “can I join you?”",
  "Wasn't hard to crack Forrest Gump's password. 1forrest1.",
  "I love pressing the F5 key. It's refreshing.",
  "Called IT support and a chap from Australia came to fix my network connection.  I asked “Do you come from a LAN down under?”",
  "There are 10 types of people in the world. Those who understand binary and those who don't.",
  "Why are assembly programmers often wet? They work below C level.",
  "My favourite computer based band is the Black IPs.",
  "What programme do you use to predict the music tastes of former US presidential candidates? An Al Gore Rhythm.",
  "An SEO expert walked into a bar, pub, inn, tavern, hostelry, public house.",
];

export const handler = (_req: Request, _ctx: FreshContext): Response => {
  const randomIndex = Math.floor(Math.random() * JOKES.length);
  const body = JOKES[randomIndex];
  return new Response(body);
};
</file>

<file path="routes/api/logs.ts">
// routes/api/logs.ts
import { Handlers } from "$fresh/server.ts";
import { getLogs, insertLog } from "../../lib/db.ts";

export const handler: Handlers = {
  GET(_req) {
    const logs = getLogs();
    return new Response(JSON.stringify(logs), {
      headers: { "Content-Type": "application/json" },
    });
  },

  async POST(req) {
    const data = await req.json();
    const { date, title, content } = data;
    if (!date || !title || !content) {
      return new Response("Missing fields", { status: 400 });
    }
    insertLog(date, title, content);
    return new Response("OK", { status: 200 });
  },
};
</file>

<file path="routes/create/index.tsx">
import CreateForm from "../../islands/CreateForm.tsx";

export default function Greet() {
  return (
    <div class="fl-col">
      <CreateForm />
    </div>
  );
}
</file>

<file path="routes/index.tsx">
import { Handlers, PageProps } from "$fresh/server.ts";
import { ArticleItem } from "../components/ArticleItem.tsx";
import Article from "../models/Article.ts";
import { getLogs } from "../lib/db.ts";

export const handler: Handlers<Article[]> = {
  GET(_req, ctx) {
    const articles = getLogs();
    return ctx.render(articles);
  },
};

export default function Home({ data }: PageProps<Article[]>) {
  return (
    <div class="fl-col" style={{ gap: "3rem" }}>
      {data.map((article, i) => <ArticleItem key={i} article={article} />)}
    </div>
  );
}
</file>

<file path="static/logo.svg">
<svg width="40" height="40" fill="none" xmlns="http://www.w3.org/2000/svg">
  <path d="M34.092 8.845C38.929 20.652 34.092 27 30 30.5c1 3.5-2.986 4.222-4.5 2.5-4.457 1.537-13.512 1.487-20-5C2 24.5 4.73 16.714 14 11.5c8-4.5 16-7 20.092-2.655Z" fill="#FFDB1E"/>
  <path d="M14 11.5c6.848-4.497 15.025-6.38 18.368-3.47C37.5 12.5 21.5 22.612 15.5 25c-6.5 2.587-3 8.5-6.5 8.5-3 0-2.5-4-5.183-7.75C2.232 23.535 6.16 16.648 14 11.5Z" fill="#fff" stroke="#FFDB1E"/>
  <path d="M28.535 8.772c4.645 1.25-.365 5.695-4.303 8.536-3.732 2.692-6.606 4.21-7.923 4.83-.366.173-1.617-2.252-1.617-1 0 .417-.7 2.238-.934 2.326-1.365.512-4.223 1.29-5.835 1.29-3.491 0-1.923-4.754 3.014-9.122.892-.789 1.478-.645 2.283-.645-.537-.773-.534-.917.403-1.546C17.79 10.64 23 8.77 25.212 8.42c.366.014.82.35.82.629.41-.14 2.095-.388 2.503-.278Z" fill="#FFE600"/>
  <path d="M14.297 16.49c.985-.747 1.644-1.01 2.099-2.526.566.121.841-.08 1.29-.701.324.466 1.657.608 2.453.701-.715.451-1.057.852-1.452 2.106-1.464-.611-3.167-.302-4.39.42Z" fill="#fff"/>
</svg>
</file>

<file path="static/styles.css">
*,
*::before,
*::after {
  box-sizing: border-box;
}
* {
  margin: 0;
}
button {
  color: inherit;
}
button,
[role="button"] {
  cursor: pointer;
}
code {
  font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas,
    "Liberation Mono", "Courier New", monospace;
  font-size: 1em;
}
img,
svg {
  display: block;
}
img,
video {
  max-width: 100%;
  height: auto;
}

html {
  line-height: 1.5;
  -webkit-text-size-adjust: 100%;
  font-family: ui-sans-serif, system-ui, -apple-system, BlinkMacSystemFont,
    "Segoe UI", Roboto, "Helvetica Neue", Arial, "Noto Sans", sans-serif,
    "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji";
  display: flex;
  flex-direction: column;
  height: 100%;
  align-items: center;
  background-color: #eee;
}

body {
  padding: 24px;
  width: 100%;
  max-width: 1000px;
  height: 100%;
  background-color: #fff;
}

main {
  margin-top: 36px;
}

.w100 {
  width: 100%;
}

.h100 {
  height: 100%;
}

.fl-col {
  display: flex;
  flex-direction: column;
}

.fl-row {
  display: flex;
  flex-direction: row;
}

.ai-center {
  align-items: center;
}

.jc-center {
  justify-content: center;
}

.form-root {
  width: 600px;
}
</file>

<file path="tools/init_db.ts">
// tools/init_db.ts
import { DB } from "https://deno.land/x/sqlite/mod.ts";

const db = new DB("data/logs.sqlite");

db.execute(`
  CREATE TABLE IF NOT EXISTS logs (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    date TEXT NOT NULL,
    title TEXT NOT NULL,
    content TEXT NOT NULL
  );
`);

console.log("DB initialized.");
db.close();
</file>

</files>
